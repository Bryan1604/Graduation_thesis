version: '3'

x-spark-common: &spark-common
  # image: bitnami/spark:latest
  build:
    context : ./spark
    dockerfile: Dockerfile
  volumes:
    - ./jobs:/opt/bitnami/spark/jobs
    - /Users/nghiann/Library/Python/3.11/lib/python/site-packages:/usr/local/lib/python3.11/site-packages
  command: bash -c "spark-submit"
  networks:
    - confluent

x-airflow-common: &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile
  env_file:
    - ./airflow/airflow.env
  volumes:
    - ./jobs:/opt/airflow/jobs
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
  depends_on:
    - postgres
  networks:
    - confluent

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test:
        [
          'CMD',
          'bash',
          '-c',
          "echo 'ruok' | nc localhost 2181"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - confluent

  kafka1:
    container_name: kafka1
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # KAFKA_LISTENERS: PLAINTEXT://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka2:
    container_name: kafka2
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29093:29093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - confluent

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'bash',
  #         '-c',
  #         "echo 'ruok' | nc localhost 2181"
  #       ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - confluent

  # kafka1:
  #   container_name: kafka1
  #   image: confluentinc/cp-kafka:latest
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 9092:9092
  #     - 29092:29092
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     ALLOW_PLAINTEXT_LISTENER: yes
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
  #     KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
  #   networks:
  #     - confluent
  #   healthcheck:
  #     test: ["CMD", "bash", "-c", 'echo > /dev/tcp/localhost/9092']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # kafka2:
  #   container_name: kafka2
  #   image: confluentinc/cp-kafka:latest
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 9093:9093
  #     - 29093:29093
  #   environment:
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     ALLOW_PLAINTEXT_LISTENER: yes
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
  #     KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9093
  #   networks:
  #     - confluent
  #   healthcheck:
  #     test: ["CMD", "bash", "-c", 'echo > /dev/tcp/localhost/9093']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5


  scala-stream-collector:
    container_name: collector
    image: snowplow/scala-stream-collector-kafka:3.1.0
    command: [ "--config", "/snowplow/config.hocon" ]
    depends_on:
      - kafka1
    ports:
      - "8080:8080"
    volumes:
      - ./snowplow/collector-config:/snowplow/
    networks:
      - confluent

  stream-enrich:
    container_name: enrich
    image: snowplow/snowplow-enrich-kafka:3.8.0
    command:
      [
        "--config",
        "/snowplow/config.hocon",
        "--iglu-config",
        "/snowplow/resolver.json",
        "--enrichments",
        "/snowplow/enrichments"
      ]
    depends_on:
      - scala-stream-collector
    volumes:
      - ./snowplow/enrich-config:/snowplow
    networks:
      - confluent

  # db cho iglu server
  postgresdb:
    image: postgres
    container_name: my-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: igludb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: snowplow
    volumes:
      - ./snowplow/iglu-server-config/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./snowplow/postgres-data:/var/lib/postgresql@14/data
    networks:
      - confluent

  iglu-server:
    container_name: iglu-server
    image: snowplow/iglu-server:0.10.0
    depends_on:
      - postgresdb
    ports:
      - "8181:8181"
    volumes:
      - ./snowplow/iglu-server-config:/iglu
    command: "--config /iglu/config.hocon"
    networks:
      - confluent
  
  spark-master:
    <<: *spark-common
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
      - "22:22"

  spark-worker:
    <<: *spark-common
    container_name: spark-worker
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077
  
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    networks:
      - confluent

  webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8082:8080"
    depends_on:
      - scheduler

  scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname luong --lastname vu --role Admin --email luongvuhs@gmail.com --password admin && airflow scheduler"

  #elastic search 
  elasticsearch:
    image: elasticsearch:8.13.0
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    mem_limit: 2g
    cpus: 2
    environment:
      - cluster.name=streaming_event
      - node.name=elasticsearch   # 1 node trÃªn cluster
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - ./data:/var/lib/elasticsearch/data
    networks:
      - confluent

  db:
    image: mysql
    container_name: database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: CDP
      # MYSQL_USER: root
      # MYSQL_PASSWORD: 12345678
    ports:
      - "3306:3306"
    volumes:
      - ./data:/var/lib/mysql

networks:
  confluent:

