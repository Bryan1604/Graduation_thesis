version: '3.8'

x-spark-common: &spark-common
  # image: bitnami/spark:latest
  build:
    context : ./spark
    dockerfile: Dockerfile
  volumes:
    - ./jobs:/opt/bitnami/spark/jobs
    # - /Users/nghiann/Library/Python/3.11/lib/python/site-packages:/usr/local/lib/python3.11/site-packages
  command: bash -c "spark-submit"
  networks:
    - confluent

x-airflow-common: &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile
  env_file:
    - ./airflow/airflow.env
  volumes:
    - ./jobs:/opt/airflow/jobs
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
  depends_on:
    - postgres
  networks:
    - confluent
  platform: linux/amd64

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test:
        [
          'CMD',
          'bash',
          '-c',
          "echo 'ruok' | nc localhost 2181"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 2g
    cpus: 2
    networks:
      - confluent
    platform: linux/amd64

  kafka1:
    container_name: kafka1
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # KAFKA_LISTENERS: PLAINTEXT://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./kafka/server.properties:/etc/kafka/server.properties
    platform: linux/amd64

  kafka2:
    container_name: kafka2
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29093:29093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - confluent
    volumes:
      - ./kafka/server.properties:/etc/kafka/server.properties
    platform: linux/amd64

  scala-stream-collector:
    container_name: collector
    image: snowplow/scala-stream-collector-kafka:3.1.0
    command: [ "--config", "/snowplow/config.hocon" ]
    depends_on:
      - kafka1
    ports:
      - "8080:8080"
    volumes:
      - ./snowplow/collector-config:/snowplow/
    networks:
      - confluent
    platform: linux/amd64

  stream-enrich:
    container_name: enrich
    image: snowplow/snowplow-enrich-kafka:3.8.0
    command:
      [
        "--config",
        "/snowplow/config.hocon",
        "--iglu-config",
        "/snowplow/resolver.json",
        "--enrichments",
        "/snowplow/enrichments"
      ]
    depends_on:
      - scala-stream-collector
    volumes:
      - ./snowplow/enrich-config:/snowplow
    networks:
      - confluent
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1.0"
        reservations:
          memory: 1g
          cpus: "0.5"
    platform: linux/amd64

  # db cho iglu server
  postgresdb:
    image: postgres
    container_name: my-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: igludb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: snowplow
    volumes:
      - ./snowplow/iglu-server-config/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./snowplow/postgres-data:/var/lib/postgresql@14/data
    networks:
      - confluent
    platform: linux/amd64

  iglu-server:
    container_name: iglu-server
    image: snowplow/iglu-server:0.10.0
    depends_on:
      - postgresdb
    ports:
      - "8181:8181"
    volumes:
      - ./snowplow/iglu-server-config:/iglu
    command: "--config /iglu/config.hocon"
    networks:
      - confluent
    platform: linux/amd64

  namenode:
      build: .
      image: apache/hadoop:3.3.6
      container_name: namenode
      hostname: namenode
      command: ["hdfs", "namenode"]
      ports:
        - 9870:9870
      env_file:
        - ./config
      environment:
          CLUSTER_NAME: hadoop-cluster
          ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
      # environment:
      #   CLUSTER_NAME: hadoop-cluster
      #   HADOOP_HOME: /opt/hadoop
      #   HADOOP_CONF_DIR: /opt/hadoop/etc/hadoop
      #   CORE_CONF_fs_defaultFS: hdfs://namenode:8020
      # ports:
      #   - "9870:9870"
      #   - "8020:8020"
      # volumes:
      #   - ./configs/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
      #   - ./configs/hdfs-site.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
      
      platform: linux/amd64

  datanode-1:
      build: .
      image: apache/hadoop:3.3.6
      container_name : datanode-1
      command: ["hdfs", "datanode"]
      env_file:
        - ./config    
      environment:
        CLUSTER_NAME: hadoop-cluster
      #   HADOOP_HOME: /opt/hadoop
      #   HADOOP_CONF_DIR: /opt/hadoop/etc/hadoop
      # ports:
      #   - "9864:9864"
      # volumes:
      #   - ./configs/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
      #   - ./configs/hdfs-site.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
    
      platform: linux/amd64 
  datanode-2:
      build: .
      image: apache/hadoop:3.3.6
      container_name : datanode-2
      environment:
        CLUSTER_NAME: hadoop-cluster
      #   HADOOP_HOME: /opt/hadoop
      #   HADOOP_CONF_DIR: /opt/hadoop/etc/hadoop
      # ports:
      #   - "9865:9865"
      # volumes:
      #   - ./configs/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
      #   - ./configs/hdfs-site.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
      command: ["hdfs", "datanode"]
      env_file:
        - ./config  
      platform: linux/amd64 
  resourcemanager:
      build: .
      image: apache/hadoop:3.3.6
      container_name: resourcemanager
      command: ["yarn", "resourcemanager"]
      ports:
         - 8088:8088
      env_file:
        - ./config
      volumes:
        - ./test.sh:/opt/test.sh
      environment:
        CLUSTER_NAME: hadoop-cluster
      #   HADOOP_HOME: /opt/hadoop
      #   HADOOP_CONF_DIR: /opt/hadoop/etc/hadoop
      #   YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      # ports:
      #   - "8088:8088"
      # volumes:
      #   - ./configs/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
      #   - ./configs/hdfs-site.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
      #   - ./configs/yarn-site.xml:/opt/hadoop/etc/hadoop/yarn-site.xml
      #   - ./configs/mapred-site.xml:/opt/hadoop/etc/hadoop/mapred-site.xml
     
      platform: linux/amd64

  nodemanager:
      build: .
      image: apache/hadoop:3.3.6
      command: ["yarn", "nodemanager"]
      env_file:
        - ./config
      # container_name: nodemanager
      environment:
        CLUSTER_NAME: hadoop-cluster
      #   HADOOP_HOME: /opt/hadoop
      #   HADOOP_CONF_DIR: /opt/hadoop/etc/hadoop
      # ports:
      #   - "8042:8042"
      # volumes:
      #   - ./configs/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
      #   - ./configs/hdfs-site.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
      #   - ./configs/yarn-site.xml:/opt/hadoop/etc/hadoop/yarn-site.xml
      #   - ./configs/mapred-site.xml:/opt/hadoop/etc/hadoop/mapred-site.xml
      networks:
        - confluent
        
      platform: linux/amd64
  spark-master:
    <<: *spark-common
    container_name: spark-master
    hostname: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
      - "22:22"
    platform: linux/amd64

  spark-worker:
    <<: *spark-common
    container_name: spark-worker
    hostname: spark-worker
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 3
      SPARK_WORKER_MEMORY: 4g
      SPARK_MASTER_URL: spark://spark-master:7077
    platform: linux/amd64

  # spark:
  #   image: apache/spark:3.5.1
  #   container_name: spark
  #   environment:
  #     SPARK_MODE: master
  #     SPARK_MASTER_HOST: spark-master
  #     HADOOP_HOME: /opt/hadoop
  #     HADOOP_CONF_DIR: /opt/hadoop/etc/hadoop
  #     SPARK_HOME: /opt/spark
  #     SPARK_CONF_DIR: /opt/spark/conf
  #   ports:
  #     - "7077:7077"
  #     - "8084:8084"
  #   networks:
  #     - confluent
  #   volumes:
  #     - ./configs/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
  #     - ./configs/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml
  #     - ./configs/hdfs-site.xml:/opt/hadoop/etc/hadoop/hdfs-site.xml
  #     - ./configs/yarn-site.xml:/opt/hadoop/etc/hadoop/yarn-site.xml
  #     - ./configs/mapred-site.xml:/opt/hadoop/etc/hadoop/mapred-site.xml
  #   command: "/opt/spark/bin/spark-class org.apache.spark.deploy.master.Master --host spark-master"


  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    networks:
      - confluent
    platform: linux/amd64

  webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8082:8080"
    depends_on:
      - scheduler
    platform: linux/amd64

  scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: bash -c "airflow db init && airflow users create --username admin --firstname luong --lastname vu --role Admin --email luongvuhs@gmail.com --password admin && airflow scheduler"

  #elastic search 
  elasticsearch:
    image: elasticsearch:8.13.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    mem_limit: 2g
    cpus: 2
    environment:
      - cluster.name=streaming_event
      - node.name=elasticsearch   # 1 node trên cluster
      - discovery.type=single-node
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.watermark.low=80%
      - cluster.routing.allocation.disk.watermark.high=90%
      - cluster.routing.allocation.disk.watermark.flood_stage=95%
      - cluster.routing.allocation.enable=all
      - cluster.info.update.interval=1m
    volumes:
      - ./esnode:/var/lib/elasticsearch/data
    networks:
      - confluent
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -s http://localhost:9200/_cat/health | grep -o 'green\\|yellow' > /dev/null || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 12
    platform: linux/amd64

  db:
    image: mysql
    container_name: database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: CDP
      # MYSQL_USER: root
      # MYSQL_PASSWORD: 12345678
    ports:
      - "3306:3306"
    volumes:
      - ./data:/var/lib/mysql
    platform: linux/amd64

networks:
  confluent:

