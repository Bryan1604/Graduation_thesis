
networks:
  snowplow:
services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - snowplow

  kafka1:
    container_name: kafka1
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - snowplow

  # kafka2:
  #   container_name: kafka2
  #   image: confluentinc/cp-kafka:latest
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 29093:29093
  #   environment:
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,PLAINTEXT_HOST://localhost:29093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
  #   networks:
  #     - snowplow

  scala-stream-collector:
    container_name: collector
    image: snowplow/scala-stream-collector-kafka:3.1.0
    command: [ "--config", "/snowplow/config.hocon" ]
    depends_on:
      - kafka1
    ports:
      - "8080:8080"
    volumes:
      - ./collector-config:/snowplow/
    networks:
      - snowplow

  stream-enrich:
    container_name: enrich
    image: snowplow/snowplow-enrich-kafka:3.8.0
    command:
      [
        "--config",
        "/snowplow/config.hocon",
        "--iglu-config",
        "/snowplow/resolver.json",
        "--enrichments",
        "/snowplow/enrichments"
      ]
    depends_on:
      - scala-stream-collector
    volumes:
      - ./enrich-config:/snowplow
    networks:
      - snowplow

  postgresdb:
      image: postgres
      container_name: my-postgres
      ports:
        - "5432:5432"
      environment:
        POSTGRES_DB: igludb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: snowplow
      volumes:
        - ./iglu-server-config/init.sql:/docker-entrypoint-initdb.d/init.sql
        - ./postgres-data:/var/lib/postgresql/data
      networks:
        - snowplow

  iglu-server:
    container_name: iglu-server
    image: snowplow/iglu-server:0.10.0
    depends_on:
      - postgresdb
    ports:
      - "8181:8181"
    volumes:
      - ./iglu-server-config:/iglu
    command: "--config /iglu/config.hocon"
    networks:
      - snowplow

  db:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: CDP
      # MYSQL_USER: root
      # MYSQL_PASSWORD: 12345678
    ports:
      - "3306:3306"
    volumes:
      - ./data:/var/lib/mysql
  # iglu-server:
  #   image: dinhphu/snowplow-iglu:1.0.0
  #   container_name: iglu-server
  #   # restart: always
  #   ports:
  #     - 8181:8181
  #   depends_on:
  #     - postgresdb

  # collector:
  #   image: dinhphu/snowplow-collector:1.0.0
  #   container_name: collector
  #   # restart: always
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     - kafka1

  # enrich:
  #   image: dinhphu/snowplow-enrich:1.0.0
  #   container_name: enrich
  #   # restart: always
  #   depends_on:
  #     - kafka1
  #     - iglu-server
  # postgresdb:
  #   image: dinhphu/iglu-postgres:1.0.0
  #   container_name: postgresdb
  #   # restart: always
  #   ports:
  #     - 5432:5432
